{
  "_id": "xDUcpIzgrtlqREJf",
  "name": "Divine Smite",
  "type": "feat",
  "img": "icons/skills/melee/weapons-crossed-swords-teal.webp",
  "effects": [],
  "folder": null,
  "sort": 0,
  "flags": {
    "core": {
      "sourceId": "Compendium.world.class-features-expanded.ySMPQ6zNSlvkrl2f"
    },
    "betterRolls5e": {
      "quickDamage": {
        "context": {
          "0": ""
        },
        "value": {
          "0": true
        },
        "altValue": {
          "0": true
        }
      },
      "quickOther": {
        "context": "",
        "value": true,
        "altValue": true
      },
      "quickDesc": {
        "value": true,
        "altValue": true
      },
      "quickProperties": {
        "value": true,
        "altValue": true
      },
      "quickFlavor": {
        "value": true,
        "altValue": true
      },
      "quickAttack": {
        "value": true,
        "altValue": true
      }
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Divine Smite",
          "type": "script",
          "author": "EHpONhziSoZpUpN3",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "/*\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\n * will also increase the number of damage dice.\n * \n * If a token is not selected, the macro will default back to the default character for the Actor. \n * This allows for the GM to cast the macro on behalf a character that possesses it, \n * without requiring that a PC have their character selected.\n * To execute the macro a target MUST be specified and, unless configured otherwise, the character must have an available spell slot. \n * Make your regular attack and then if you choose to use Divine Smite, run this macro.\n */\n\n(() => {\n\n//Configurable variables\nlet maxSpellSlot = 10; //  Highest spell-slot level that may be used.\nlet affectedCreatureTypes = [\"fiend\", \"undead\", \"undead (shapechanger)\"]; //  Creature types that take extra damage.\n\n// Use token selected, or default character for the Actor if none is.\nlet s_actor = canvas.tokens.controlled[0]?.actor || game.user.character;     \n\n// Flag for selected slot type\nlet pactSlot = false;\n\n// Verifies if the actor can smite.\nif (s_actor?.data.items.find(i => i.name === \"Divine Smite\") === undefined){\n    return ui.notifications.error(`No valid actor selected that can use this macro.`);\n}\n\nlet confirmed = false;\nif (hasAvailableSlot(s_actor)) {\n\n    // Get options for available slots\n    let optionsText = \"\";\n    let i = 1;\n    for (; i < maxSpellSlot; i++) {\n        const slots = getSpellSlots(s_actor, i, false);\n        if (slots.value > 0) {\n            const level = CONFIG.DND5E.spellLevels[i];\n            const label = game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\n            optionsText += `<option value=\"${i}\">${label}</option>`;\n        }\n    }\n\n    // Check for Pact slot\n    const slots = getSpellSlots(s_actor, 0, true);\n    if(slots.value > 0) {\n        i++;\n        const level = CONFIG.DND5E.spellLevels[slots.level];\n        const label = 'Pact: ' + game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\n        optionsText += `<option value=\"${i}\">${label}</option>`;\n    }\n\n    // Create a dialogue box to select spell slot level to use when smiting.\n    new Dialog({\n        title: \"Divine Smite: Usage Configuration\",\n        content: `\n        <form id=\"smite-use-form\">\n            <p>` + game.i18n.format(\"DND5E.AbilityUseHint\", {name: \"Divine Smite\", type: \"feature\"}) + `</p>\n            <div class=\"form-group\">\n                <label>Spell Slot Level</label>\n                <div class=\"form-fields\">\n                    <select name=\"slot-level\">` + optionsText + `</select>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"checkbox\">\n                <input type=\"checkbox\" name=\"consumeCheckbox\" checked/>` + game.i18n.localize(\"DND5E.SpellCastConsume\") + `</label>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"checkbox\">\n                <input type=\"checkbox\" name=\"criticalCheckbox\"/>` + game.i18n.localize(\"DND5E.CriticalHit\") + \"?\" + `</label>\n            </div>\n        </form>\n        `,\n        buttons: {\n            one: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"SMITE!\",\n                callback: () => confirmed = true\n            },\n            two: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n                callback: () => confirmed = false\n            }\n        },\n        default: \"Cancel\",\n        close: html => {\n            if (confirmed) {\n                let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\n                if(slotLevel > maxSpellSlot) {\n                    slotLevel = actor.data.data.spells.pact.level;\n                    pactSlot = true;\n                }\n                const criticalHit = html.find('[name=criticalCheckbox]')[0].checked;\t\t\t\t\n                const consumeSlot = html.find('[name=consumeCheckbox]')[0].checked;\n                smite(s_actor, slotLevel, criticalHit, consumeSlot, pactSlot);\n            }\n        }\n    }).render(true);\n\n} else {\n    return ui.notifications.error(`No spell slots available to use this feature.`);    \n}\n\n/**\n * Gives the spell slot information for a particular actor and spell slot level.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\n * @param {boolean} isPact - whether the spell slot is obtained through pact.\n * @returns {object} contains value (number of slots remaining), max, and override.\n */\nfunction getSpellSlots(actor, level, isPact) {\n    if(isPact == false) {\n        return actor.data.data.spells[`spell${level}`];\n    }\n    else {\n        return actor.data.data.spells.pact;\n    }\n}\n\n/**\n * Returns whether the actor has any spell slot left.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\n */\n function hasAvailableSlot(actor) {\n    for (let slot in actor.data.data.spells) {\n        if (actor.data.data.spells[slot].value > 0) {\n            return true;\n        }\n    }\n    return false;\n }\n\n/**\n * Use the controlled token to smite the targeted token.\n * @param {Actor5e} actor - the actor that is performing the action.\n * @param {integer} slotLevel - the spell slot level to use when smiting.\n * @param {boolean} criticalHit - whether the hit is a critical hit.\n * @param {boolean} consume - whether to consume the spell slot.\n * @param {boolean} isPact - whether the spell slot used is obtained through pact.\n */\nasync function smite(actor, slotLevel, criticalHit, consume, isPact) {\n    let targets = game.user.targets;\n\n    let chosenSpellSlots = getSpellSlots(actor, slotLevel, isPact);\n\n    if (chosenSpellSlots.value < 1) {\n        ui.notifications.error(\"No spell slots of the required level available.\");\n        return;\n    }\n    if (targets.size !== 1) {\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\n        return;\n    }\n\n    const [target] = targets;\n    let numDice = Math.min(5, slotLevel + 1);\n    let type = target.actor.data.data.details.type?.value;\n    if (affectedCreatureTypes.includes(type)) numDice += 1;\n    if (criticalHit) numDice *= 2;\n    const flavor = `Macro Divine Smite - ${game.i18n.localize(\"DND5E.DamageRoll\")} (${game.i18n.localize(\"DND5E.DamageRadiant\")})`;\n    let damageRoll = new Roll(`${numDice}d8`);\n\n    let targetActor = game.user.targets.values().next().value.actor;\n    \n    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER) {\n        // We need help applying the damage, so make a roll message for right-click convenience.\n        await damageRoll.toMessage({\n            speaker: ChatMessage.getSpeaker(),\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\n            <p><em>Manually apply (or right-click) ${damageRoll.result} HP of damage to ${targetActor.data.name}</em></p>` });\n    }\n    else {\n        // We can apply damage automatically, so just show a normal chat message.\n        await damageRoll.toMessage({\n            speaker: ChatMessage.getSpeaker(),\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\n            <p><em>${targetActor.data.name} has taken ${damageRoll.result} HP of damage.</em></p>` });\n        targetActor.update({\"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value - damageRoll.result});\n    }\n\n    if (consume){\n        let objUpdate = new Object();\n        if(isPact == false) {\n            objUpdate['data.spells.spell' + slotLevel + '.value'] = chosenSpellSlots.value - 1;\n        }\n        else {\n            objUpdate['data.spells.pact.value'] = chosenSpellSlots.value - 1;\n        }\n        \n        actor.update(objUpdate);\n    }\n}\n\n})();",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Divine Smite",
        "type": "script",
        "scope": "global",
        "command": "// DIVINE SMITE\n// required modules: none.\n\nconst rollData = foundry.utils.duplicate(actor.getRollData());\nconst inputs = Object.entries(rollData.spells).filter(s => {\n    return s[1].value > 0;\n}).map(([key, { value, max }]) => {\n    const crd = key === \"pact\" ? \"Pact Slot\" : nth(Number(key.at(-1)));\n    return [key, crd, value, max];\n});\nif ( inputs.length < 1 ) {\n    ui.notifications.warn(\"You have no spell slots remaining.\");\n    return;\n}\n\nconst options = inputs.reduce((acc, [key, crd, value, max]) => {\n    return acc + `<option value=\"${key}\">${crd} (${value}/${max})</option>`;\n}, \"\");\n\nconst content = `\n<form>\n    <div class=\"form-group\">\n        <label style=\"flex: 1;\">Spell Slot:</label>\n        <div class=\"form-fields\">\n            <select id=\"smite-slot\">${options}</select>\n            <input type=\"checkbox\" id=\"extra-die\"></input>\n            <label for=\"extra-die\" style=\"white-space: nowrap;\">Extra die</label>\n        </div>\n    </div>\n</form>`;\n\nnew Dialog({\n    title: \"Divine Smite\",\n    content,\n    buttons: {\n        smite: {\n            icon: \"<i class='fas fa-gavel'></i>\",\n            label: \"Smite!\",\n            callback: async (html) => await rollDamage(html)\n        }\n    }\n}).render(true);\n\nfunction nth(n){return n + ([\"st\",\"nd\",\"rd\"][((n+90)%100-10)%10-1]||\"th\")}\n\nasync function rollDamage(html){\n    const slot = html[0].querySelector(\"#smite-slot\").value;\n    const extra = html[0].querySelector(\"#extra-die\").checked;\n    const level = slot === \"pact\" ? rollData.spells[\"pact\"].level : Number(slot.at(-1));\n    const dice = Math.min(5, 1 + level) + (extra ? 1 : 0);\n    const formula = `${dice}d8`;\n\n    const damageRoll = await new Item.implementation({\n        type: \"feat\",\n        name: \"Divine Smite\",\n        system: { damage: { parts: [[formula, \"radiant\"]] } }\n    }, { parent: actor }).rollDamage();\n    if ( !damageRoll ) return;\n    const value = rollData.spells[slot].value - 1;\n    return actor.update({ [`system.spells.${slot}.value`]: value });\n}",
        "author": "UjfixXuqstXNdypa",
        "_id": null,
        "img": "icons/svg/dice-target.svg",
        "folder": null,
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "mre-dnd5e": {
      "formulaGroups": [
        {
          "label": "Primary",
          "formulaSet": [
            0
          ]
        },
        {
          "label": "Versatile",
          "formulaSet": [
            1
          ]
        }
      ],
      "migratedVersatile": true
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    }
  },
  "system": {
    "description": {
      "value": "<p>À partir du 2e niveau, lorsque vous touchez une créature avec une attaque de mêlée, vous pouvez dépenser une case de sort pour infliger des dégâts radiants à la cible, en plus des dégâts de l'arme.</p><p>Les dégâts supplémentaires sont [[/r 2d8]]<strong> </strong>pour une case de sort de 1er niveau, plus [[/r 1d8]] pour chaque niveau de sort supérieur à 1er, jusqu'à un maximum de [[/r 5d8]]. Les dégâts augmentent de [[/r 1d8]]<strong> </strong>si la cible est un <strong>undead </strong>ou un <strong>fiend</strong>, jusqu'à un maximum de [[/r 6d8]].</p><section class=\"secret\" id=\"secret-hPZls5i1qm2Avh29\"><p><em>DM Note: Enable Character Sheet Hook in Item Macro's module settings. Alternatively, add the </em>@UUID[Compendium.5e-complete-fr.5e-macros.XSuQe3bQ2Kx6yDq5]{Divine Smite}<em> macro to your hot bar.</em></p></section>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB",
    "activation": {
      "type": "special",
      "cost": null,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": "",
      "recovery": "",
      "type": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": "0",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "2d8",
          "radiant"
        ],
        [
          "1d8",
          "radiant"
        ]
      ],
      "versatile": "1d8"
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell",
      "value": ""
    },
    "requirements": "Paladin 2",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "ownership": {
    "default": 0,
    "LCw1mxC8S2Al3dWA": 3
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "2.0.3",
    "coreVersion": "12.331",
    "createdTime": null,
    "modifiedTime": 1666649530956,
    "lastModifiedBy": "9DrM9sBIPMUTBZIH",
    "compendiumSource": "Compendium.world.class-features-expanded.ySMPQ6zNSlvkrl2f",
    "duplicateSource": null
  },
  "_key": "!items!xDUcpIzgrtlqREJf"
}